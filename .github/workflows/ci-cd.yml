name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Install backend dependencies
      run: |
        cd backend
        poetry install
        poetry run pip install pymongo

    - name: Install pytest
      run: |
        cd backend
        poetry run pip install pytest

    - name: Run backend tests
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
      run: |
        cd backend
        poetry run pytest

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: |
        cd frontend/web
        npm ci

    - name: Install jest-environment-jsdom
      run: |
        cd frontend/web
        npm install --save-dev jest-environment-jsdom

    - name: Run frontend tests
      run: |
        cd frontend/web
        npm test

    - name: Build frontend
      run: |
        cd frontend/web
        npm run build

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Deploy backend
      run: |
        # Add backend deployment steps here
        echo "Deploying backend..."

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install Vercel CLI
      run: npm install -g vercel

    - name: Deploy frontend to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        cd frontend/web
        vercel --token $VERCEL_TOKEN --prod
